module Main where

import Graphics.Gloss 
import Graphics.Gloss.Data.Picture 
import Graphics.Gloss.Interface.Pure.Game 

-- | função principal que invoca o jogo.
main :: IO ()
main = do
    boneco <- loadBMP "/home/miguel/Imagens/Sokoban/boneco.bmp" -- carrega a imagem da boneco
    caixa <- loadBMP "/home/miguel/Imagens/Sokoban/crate.bmp"
    joga ((1900,900),(200,200), [(400, 400), (300, 300), (500, 500)],boneco, caixa) desenhaMapa reageEvento

-- | Estado do jogo:
--
-- * Dimensões do mapa
-- * Coordenadas da boneco no mapa
-- * Imagem da boneco
type Mapa = ((Float,Float),(Float,Float),[(Float, Float)], Picture, Picture)

-- | Move a boneco uma coordenada para o lado
moveBoneco :: (Float,Float) -> Mapa -> Mapa
moveBoneco (x,y) ((xMapa,yMapa),(xBoneco,yBoneco),[(xCaixas, yCaixas)], boneco, caixa) = ((xMapa,yMapa),(arredonda xMapa (x + xBoneco),arredonda yMapa (y + yBoneco)),[(xCaixas, yCaixas)] ,boneco, caixa)
    where
    -- Evita que a  boneco saia fora do mapa
    -- assume que a boneco é um quadrado com arestas de comprimento 20
    arredonda limite p = max 20 (min p (limite-20))

-- | Desenha o jogo dentro da janela
desenhaMapa :: Mapa -> Picture
desenhaMapa ((xMapa,yMapa),(x,y), (h:t), boneco, caixa) = Pictures [borda,tabuleiro,figura, Pictures (colocaCaixas (h:t) caixa)]
    where
    -- borda do mapa a preto, centrada na janela
    borda = Translate (-(xMapa+20)/2) (-(yMapa+20)/2) $ Color black (Polygon [(0,0),(0,yMapa + 20),(xMapa + 20,yMapa + 20),(xMapa + 20,0)])
    -- mapa a branco, centrado na janela
    tabuleiro = Translate (-xMapa/2) (-yMapa/2) $ Color white (Polygon [(0,0),(0,yMapa),(xMapa,yMapa),(xMapa,0)])
    -- boneco dentro do mapa do jogo
    figura = Translate (-xMapa/2) (-yMapa/2) $ Translate x y boneco
    --coloca a caixa no local correto
    colocaCaixas :: [(Float, Float)] -> Picture -> [Picture]
    colocaCaixas [] _ = []
    colocaCaixas (h:t) caixa = (objeto h  caixa) : colocaCaixas t caixa
    objeto :: (Float, Float) -> Picture -> Picture
    objeto (x1,y1) caixa =  Translate (-xMapa/2) (-yMapa/2) $ Translate x1 y1 caixa

-- | Reage ao pressionar das setas do teclado, movendo a boneco 5 pixéis numa direção
reageEvento :: Event -> Mapa -> Mapa
reageEvento (EventKey (SpecialKey KeyUp)    Down _ _) mapa = moveBoneco (0,20)  mapa
reageEvento (EventKey (SpecialKey KeyDown)  Down _ _) mapa = moveBoneco (0,-5) mapa
reageEvento (EventKey (SpecialKey KeyLeft)  Down _ _) mapa = moveBoneco (-5,0) mapa
reageEvento (EventKey (SpecialKey KeyRight) Down _ _) mapa = moveBoneco (30,0)  mapa
reageEvento _ mapa = mapa -- ignora qualquer outro evento

-- | Não reage ao passar do tempo.
reageTempo :: Float -> mundo -> mundo
reageTempo t m = m

-- | Função que cria um jogo.
joga :: mundo -> (mundo -> Picture) -> (Event -> mundo -> mundo) -> IO ()
joga mapaInicial desenha reage = play
    (InWindow "Bola" (1920, 1080) (0, 0)) -- Tamanho da janela do jogo
    (greyN 0.5) -- Côr do fundo da janela
    45 -- refresh rate
    mapaInicial -- mapa inicial
    desenha -- função que desenha o mapa
    reage -- função que reage a um evento (carregar numa tecla, mover o rato, etc)
    reageTempo -- função que reage ao passar do tempo 
