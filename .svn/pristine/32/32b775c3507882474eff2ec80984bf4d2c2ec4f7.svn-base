{-|Module : Main
Descrição : Módulo de Haskell referente à última tarefa do projeto de LI.
Copyright : Miguel Quaresma <miguelquaresma97@gmail.com>
			João Nogueira

Módulo final que tem por objetivo implementar um jogo semelhante ao Sokoban  

-}




module Main where

import Graphics.Gloss 
import Graphics.Gloss.Data.Picture 
import Graphics.Gloss.Interface.Pure.Game 

-- | função principal que invoca o jogo.
main :: IO ()
main = do
    boneco <- loadBMP "/home/miguel/Imagens/Sokoban/boneco.bmp" -- carrega a imagem da boneco
    caixa <- loadBMP "/home/miguel/Imagens/Sokoban/crate.bmp"
    joga ((1900,900),(400,300), (400, 400) ,boneco, caixa) desenhaMapa reageEvento

-- | Estado do jogo:
--
-- * Dimensões do mapa
-- * Coordenadas da boneco no mapa
-- * Imagem da boneco
type Mapa = ((Float,Float),(Float,Float),(Float, Float), Picture, Picture)

-- | Move a boneco uma coordenada para o lado
moveBoneco :: (Float,Float) -> Mapa -> Mapa
moveBoneco (x,y) ((xMapa,yMapa),(xBoneco,yBoneco),(xCaixa, yCaixa), boneco, caixa) = ((xMapa,yMapa),(arredonda xMapa (x + xBoneco),arredonda yMapa (y + yBoneco)),(xCaixa, yCaixa) ,boneco, caixa)
    where
    -- Evita que a  boneco saia fora do mapa
    -- assume que a boneco é um quadrado com arestas de comprimento 20
    arredonda limite p = max 20 (min p (limite-20))

-- | Move a caixa caso o boneco a empurre
-- | Move a boneco uma coordenada para o lado
moveCaixa :: (Float,Float) -> Mapa -> Mapa
moveCaixa (x,y) ((xMapa,yMapa),(xBoneco,yBoneco),(xCaixa, yCaixa), boneco, caixa) = ((xMapa,yMapa),(xBoneco, yBoneco),(arredonda xMapa (x + xCaixa),arredonda yMapa (y + yCaixa)) ,boneco, caixa)
    where
    -- Evita que a  boneco saia fora do mapa
    -- assume que a boneco é um quadrado com arestas de comprimento 20
    arredonda limite p = max 20 (min p (limite-20))


-- | Desenha o jogo dentro da janela
desenhaMapa :: Mapa -> Picture
desenhaMapa ((xMapa,yMapa),(x,y), cords, boneco, caixa) = Pictures [borda,tabuleiro,figura, objeto cords caixa]
    where
    -- borda do mapa a preto, centrada na janela
    borda = Translate (-(xMapa+20)/2) (-(yMapa+20)/2) $ Color black (Polygon [(0,0),(0,yMapa + 20),(xMapa + 20,yMapa + 20),(xMapa + 20,0)])
    -- mapa a branco, centrado na janela
    tabuleiro = Translate (-xMapa/2) (-yMapa/2) $ Color white (Polygon [(0,0),(0,yMapa),(xMapa,yMapa),(xMapa,0)])
    -- boneco dentro do mapa do jogo
    figura = Translate (-xMapa/2) (-yMapa/2) $ Translate x y boneco
    --coloca a caixa no local correto
    --colocaCaixas :: [(Float, Float)] -> Picture -> [Picture]
    --colocaCaixas [] _ = []
    --colocaCaixas (h:t) caixa = (objeto h  caixa) : colocaCaixas t caixa
    objeto :: (Float, Float) -> Picture -> Picture
    objeto (x1,y1) caixa =  Translate (-xMapa/2) (-yMapa/2) $ Translate x1 y1 caixa


move :: (Float,Float) -> Char -> (Float, Float)
move (l1, l2) c |c == 'U' = (l1 , l2 + 5)
				|c == 'D' = (l1 , l2 - 5)
				|c == 'L' = (l1 - 5  , l2)
				|c == 'R' = (l1 + 5  , l2)

-- | Reage ao pressionar das setas do teclado, movendo a boneco 5 pixéis numa direção
reageEvento :: Event -> Mapa -> Mapa
reageEvento (EventKey (SpecialKey KeyUp)    Down _ _) mapa = if((move cordBoneco 'U') == (x-5, y-5)) then moveCaixa (0,5) (moveBoneco (0,5)  mapa) else moveBoneco (0,5)  mapa
	where
		(limMp, cordBoneco, (x, y), boneco, caixa) = mapa
reageEvento (EventKey (SpecialKey KeyDown)  Down _ _) mapa = if((move cordBoneco 'D') == (x-5, y-5)) then moveCaixa (0,-5) (moveBoneco (0,-5)  mapa) else moveBoneco (0,-5)  mapa
	where
		(limMp, cordBoneco, (x, y), boneco, caixa) = mapa
reageEvento (EventKey (SpecialKey KeyLeft)  Down _ _) mapa = if((move cordBoneco 'L') == (x-5, y-5)) then moveCaixa (-5,0) (moveBoneco (-5,0)  mapa) else moveBoneco (-5,0)  mapa
	where
		(limMp, cordBoneco, (x, y), boneco, caixa) = mapa
reageEvento (EventKey (SpecialKey KeyRight) Down _ _) mapa = if((move cordBoneco 'R') == (x-5, y-5)) then moveCaixa (5,0) (moveBoneco (5,0)  mapa) else moveBoneco (5,0)  mapa
	where
		(limMp, cordBoneco, (x, y), boneco, caixa) = mapa
reageEvento _ mapa = mapa -- ignora qualquer outro evento

-- | Não reage ao passar do tempo.
reageTempo :: Float -> mundo -> mundo
reageTempo t m = m

-- | Função que cria um jogo.
joga :: mundo -> (mundo -> Picture) -> (Event -> mundo -> mundo) -> IO ()
joga mapaInicial desenha reage = play
    (InWindow "Bola" (1920, 1080) (0, 0)) -- Tamanho da janela do jogo
    (greyN 0.5) -- Côr do fundo da janela
    45 -- refresh rate
    mapaInicial -- mapa inicial
    desenha -- função que desenha o mapa
    reage -- função que reage a um evento (carregar numa tecla, mover o rato, etc)
    reageTempo -- função que reage ao passar do tempo 
