module Main where

import Data.Char
import qualified Data.Text as T

main = do
	inp <- getContents
	putStr $ outStr $ tarefa1 $ inStr inp


{-teste:: String -> IO ()
teste file = do
	content <- readFile file
	let mapa = processMapa content
	putStr $ verificaMapa (fst mapa)-}

type Mapa = ([String], [(Int,Int)])

processMapa :: String -> Mapa
processMapa conteudo = (arrecadacao, coordenadas)
	where
		linhas = lines conteudo
		tamanhoArrecadacao = 11
		(arrecadacao, posicoes) = splitAt tamanhoArrecadacao linhas
		coordenadas = map processaPosicoes posicoes

processaPosicoes :: String -> (Int,Int)
processaPosicoes linha = (read x, read y)
	where
		[x,y] = words linha


verificaMapa :: [String] -> String 
verificaMapa (h:t) = if(contornosCheck h) then if(verificaInterior 2 (take (length t - 1) t) == 0) then if(contornosCheck (last t) && length (last t) == length h) then "OK\n" 
																												else (intToDigit (length (h:t))) : " linha\n"
										  	   								  					   else intToDigit (verificaInterior 2 (take (length t - 1) t)) : " linha\n"              					 
					 else (intToDigit 1) : " linha\n"

inStr :: String -> [String]
inStr [] = []
inStr ['\n'] = [[],[]]
inStr (x:xs) = case x of
    '\n' -> []:inStr xs
    otherwise -> case inStr xs of
        y:ys -> (x:y):ys
        [] -> [[x]]

outStr :: [String] -> String
outStr [] = "\n"
outStr t = unlines (map (T.unpack . T.stripEnd . T.pack) t)


tarefa1 :: [String] -> [String]
tarefa1 linhas = [verificaMapa linhas]

verificaInterior :: Int -> [String] -> Int --verifica se ha algum caracter do mapa que não seja "." , "#", " "
verificaInterior _ [] = 0
verificaInterior n (h:t) = if(aux1 h && verificarLados h) then verificaInterior (n+1) t else n 
	where 
		aux1 :: String -> Bool
		aux1 [] = True
		aux1 (x:xs) = if(ord x == 32 || ord x == 46 || ord x == 35) then aux1 xs else False


--
contornosCheck :: String -> Bool --verifica se todos os caracteres da primeira linha sao cardinais (#)
contornosCheck [] = True
contornosCheck (x:xs) = if(ord x == 35) then contornosCheck xs else False


verificarLados :: String -> Bool --verifica se os contornos laterais são 
verificarLados (h:t) = if(ord h == 35 && ord (last t) == 35) then True else False


{-testacomprimento :: [String] -> Bool
testacomprimento [x] = True
testacomprimento (x:xs) |length x == length (head xs) = testacomprimento xs
						|otherwise = False-}
